Sr. Java/Groovy Developer, Groovy and CodeNarc Committer
Hamlet D'Arcy has been writing software for over a decade, and has spent considerable time coding in C++, Java, and Groovy. He's passionate about learning new languages and different ways to think about problems. Hamlet is the founder of the Basel-based Hackergarten open source coding group, and regularly participates and speaks at local and international user groups and conferences. Hamlet is a committer on the Groovy and CodeNarc projects, and is a contributor on a few other open source projects (including JConch and the IDEA Groovy Plugin). He blogs regularly at http://hamletdarcy.blogspot.com and can be found on Twitter as HamletDRC (http://twitter.com/hamletdrc).

Static Analysis in IntelliJ IDEA
--------------------------------
Let's face it - the code we write contains bugs. These bugs impact stability, reliability, correctness, performance or maintainability of our applications as well as our own reputation as developers. I'll show you some handy tools that help in finding and eliminating bugs, tools that enable you to start fixing reported exceptions in seconds, tools that highlight repetitive pieces of code, analyze flow of values through your program, visualize dependencies in code and highlight possible dependency problems. During the presentation I'll show you an alternative view on IntelliJ IDEA, a Java IDE with more than a 10 year history in the field. You'll get a chance to see lots of hands-on practical demos revealing the analysis aspect of the IDE and gain more insight into how you can fight for greater code quality in your projects, today.

Defects impact stability, reliability, and correctness, as well as our reputation as developers. This session shows tools for finding and eliminating bugs, fixing reported exceptions, highlighting duplicate code, analyzing program flow, and visualizing dependencies. Come see a new view of IntelliJ IDEA, see hands-on demos, and gain insight into how you can fight for greater code quality.


Groovy AST Transformations
--------------------------

Code Generation on the JVM: Writing Code that Writes Code
---------------------------------------------------------
"The Pragmatic Programmer" admonished us all to "write code that writes code": use code generators to increase productivity and avoid duplication. Today's language communities have clearly caught on, as more and more frameworks generate code at compile time: AST Transforms, Project Lombok, Spring Roo, Contracts for Java, Spock, GContracts, Groovy++, and more. This session reviews these approaches including examples of how and why we'd want to do this. Come see the newest Groovy language tools, look in-depth at production deployed AST Transforms, and view libraries based on these techniques. Audience: developers searching for cutting edge solutions to increasing team velocity.

More and more JVM frameworks are generating code at compile time: AST Transforms, Project Lombock, and Spring Roo, and more. This session reviews these approaches, including examples of how and why we'd want to do this. We'll see the newest Groovy language tools, write our own AST Transform, and look at some amazing libraries based on these techniques. 


New Ideas for Old Code
----------------------
Left unattended software can expand into a complex, brittle maintenance nightmare. Don't despair! This session teaches strategies for modernizing even the most horrid code swamps, examining incremental refactorings and the dos and don'ts of testing legacy code. We'll also tackle the harder, cultural issues: how to inspire your co-workers and keep your moral high even on the dirtiest jobs.

Slimmed Down Software: A Lean Approach
--------------------------------------
Waterfall, Scrum, XP, Crystal... there are a lot of software methodologies on sale in the world today, but Lean Software brings something different to the table. This session uses practical examples to explain what makes software valuable and which parts are waste. Come explore how systems thinking can lead your team to deliver faster, create knowledge, and eliminate waste, and return to work Monday with news ideas about delighting your customers.

Waterfall, Scrum, XP... many software methodologies on sale in the world today, but Lean Software brings something different to the table. This session uses practical examples to explain the difference between software value and waste. Explore how your team can to deliver faster, create knowledge, and eliminate waste, and return to work Monday with news ideas about delighting your customers.

Tales of Little 'a' Agile
-------------------------
Skeptical, cynical, and little suspicious? Welcome to the club. This session is for people motivated to make positive, pragmatic changes but wary of "Buy the Book" Agile. Come see the results of years of bottom-up agile: real stories and real practices that were really used. We'll share what worked and what didn't and spread new ideas that aren't found in training courses. And we promise, we're not trying to sell anything!

This session is for people motivated to make positive, pragmatic changes but wary of "Buy the Book" Agile. Come see the results of years of bottom-up agile: real stories and real practices that were really used. We'll share what worked and what didn't and spread new ideas that aren't found in training courses. And we promise, we're not trying to sell anything!


Effective Groovy
----------------
"Effective Java" by Joshua Bloch is the gold standard for how to write correct and idiomatic Java code. Wouldn't it be great if the same thing existed for Groovy? Well here it is. This interactive, live coding session discusses what separates good Groovy code from the bad, what makes some code great, and how best to use the many available libraries. We'll also look at several static analysis tools for Groovy that aid in these pursuits. This session appeals to both those with a Java knowledge looking to learn Groovy and advanced Groovy programmers looking to learn more. 

Wouldn't it be great if "Effective Java" existed for Groovy? Well here it is. This live coding session discusses what separates good Groovy code from the bad, what makes some code great, and how best to use the many available libraries. This session appeals to both those with a Java knowledge looking to learn Groovy and advanced Groovy programmers looking to learn more. 






Jazoon 
------
Implementing Groovy AST Transformations
'A language should have access to its own abstract syntax' John McCarthy, Father of Lisp. Well, now Groovy 1.7 does! Besides explaining just what an AST transformation is, this talk will show you why AST transformations are important, what you can do with them, and where the language world is headed. We'll dive into some of the useful Groovy annotations and libraries being written that harness AST transformations, see how to write our own, and work with the AST tools that came out in the latest version.


20 Minute RIA - From Zero to Deployed with Groovy and Griffon
Is it possible to install a framework, create a rich Internet application, and then deploy it all within 20 minutes? This session aims to prove just that. Come see how Groovy's Griffon framework improves your RIA productivity by giving you out-of-the-box MVC patterns, property binding between the model and view layer, a Groovy DSL for quick user interface creation, a rich and growing plugin ecosystem, and automated deployments without the need for a Java hosting solution. Shhh... Don't tell anyone it's Swing!


jax.de
------
Groovy AST Transformations
This talk will show you what an Abstract Syntax Tree is, why AST transformations are important, what you can do with them, and where the language world is headed. We'll dive into some of the useful Groovy annotations and libraries being written that harness AST transformations, see how to write our own, and work with the AST tools that came out in the latest version.

jax.de rewrite in lt 450 chars

Code Generation on the JVM
We're seeing more and more JVM frameworks designed to generate code at compile time: AST Transforms, Project Lombock, Spring Roo, Clojure Macros, and more. This session reviews these approaches, including examples of how and why we'd want to do this. We'll see the newest Groovy language tools, write our own AST Transform, and look at some amazing libraries based on these techniques. 



Transylavania JUG - April
-----------------


Biography
---------

Hamlet D'Arcy - Canoo AG
Sr. Java/Groovy Developer, Groovy and CodeNarc Committer Hamlet D'Arcy has been writing software for over a decade, and has spent considerable time coding in C++, Java, and Groovy. He's passionate about learning new languages and different ways to think about problems. Hamlet is the founder of the Basel-based Hackergarten open source coding group, and regularly participates and speaks at local and international user groups and conferences. Hamlet is a committer on the Groovy and CodeNarc projects, and is a contributor on a few other open source projects (including JConch and the IDEA Groovy Plugin). He blogs regularly at http://hamletdarcy.blogspot.com and can be found on Twitter as HamletDRC (http://twitter.com/hamletdrc). 

Headshot
-
