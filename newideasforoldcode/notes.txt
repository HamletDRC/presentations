New Ideas for Old Code
----------------------

Refactoring
-----------
28 - Refactoring vs. Reengineering
29 - Lean on the Compiler
30 - Lean on the Tools
33 - You don't need BPM
    - Break out Method Object
    - Extract Class
    - 37 Move towards a meaningful abstraction
38 - 40 - Maniacal Focus on Dependencies, prefer private static methods
41 - Inversion of control, (return out not pass in), 42 - Snip Dependency Trees with Spring
48 - Undetermined Effects - Use JUnit, BCEL, class analyzer to check special parts of the code
51 - Scratch Refactoring

x. Refactoring Book Club
 * Find Images of the 3 books. 


Testing
-------
49 - I write unit tests so that... 
x. Using Groovy 
    - 9 - easy vs. notational convenience
    - 10 - My story from Pearson
    - 11 - Groovy as a testing DSL
            12 - Default parameters, 14 - Builders
            16 - Groovy Assertions, 18 - Multiline Strings
            20 - partial interfaces, 22 - Private method access
            24 - Mocks, 25 - Flow of Groovy
            26 - Downsides
    - 17 - Cooler tools - Reality is that your problms may not be /fixed/ 

44 - Busy Constructors (are no problem to test)
46 - Subclass and Override
50 - Prefer Functional Tests? 

31 - Testability vs. Readability, 32 - Meaningless Abstractions



Social Problems
---------------
x. Social Problems (& Solutions)
    - 6 - Cut and Run - Problems with You
    - 6 - Cultural Issues - Problems with the Team
    - Stop Digging when you are in a whole, slowing down the digging is not enough
    
"I'm Burned out and Depressed"
    - 7 - Burnout - Naggum Quote / serenity prayer
    - 6 - Glacial Pace

"My co-workers are idiots"
    - 55 - assume positive intent, examine reward structures, peter principle

"I hate my job" - 57
    - make it fun (build trophy vs. 100% club)
    - Quit - 6 


"We don't know how to do this"
    - Share a canooie
    - 15 Minute Daily Refactoring (Geepaw Hill)
        - practices skills
        - become habitualized to refactoring
        - helps create long term vision



"I'd rather fund a big rewrite" - 56
     - what about a refactoring team? 

"I can't do it alone" 60 
    - no you can't
    - small refactorings are good opportunities for pairing
    - beware trying to pair with a suboptimal environment. 

"We can't get traction" - 61

"They won't let us" - 62
    - Need to prove you're not going backwards; you don't need to prove change is a good one. Uncertainty. 

"The Pace is Glacial" - 6

"We Don't have Time"
    - Uncle Bob - "What's the soonest date by which you can't prove you won't ship."
    - Estimation Theatre
    - 52 - Code review hueristics - line count, import list, keep & broadcast results

"I Don't know where to start"
    - Sonar
    - Highest # of commits 
    - Use Metrics / Inspections but avoid tumbleweeding

Unsolved Mysteries - 54





