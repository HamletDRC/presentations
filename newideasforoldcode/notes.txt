New Ideas for Old Code
----------------------

Return back, not out
--------------------


Whenever you are tempted to use ‘ref’ or ‘out’ in C# consider whether you can do the work by designing functions with single return values.

Sometimes we find that we can decompose the problem into several functions rather than one.  

When you don’t have exceptions, error codes are often munged into the return value. Passing values back via parameters can be cleaner at times in C, but if you are working in a more modern language there really are better alternatives.


At other times we find some relationship between outputs that leads us to create a new class or struct that we can use as a single return type.  

A function is supposed to do some thing for you, not some things.  If a function is giving you two things, it's beyond its quota

Tuple when you want to return two values from a function? Either built in or a Pair object


Array
ResultObj
Tuple (groovy)
Pair



Refactoring
-----------
48 - Undetermined Effects - Use JUnit, BCEL, class analyzer to check special parts of the code



Testing
-------
49 - I write unit tests so that... 
x. Using Groovy 
    - 9 - easy vs. notational convenience
    - 10 - My story from Pearson
    - 11 - Groovy as a testing DSL
            12 - Default parameters, 14 - Builders
            16 - Groovy Assertions, 18 - Multiline Strings
            20 - partial interfaces, 22 - Private method access
            24 - Mocks, 25 - Flow of Groovy
            26 - Downsides
    - 17 - Cooler tools - Reality is that your problms may not be /fixed/ 

44 - Busy Constructors (are no problem to test)
46 - Subclass and Override
50 - Prefer Functional Tests? 

31 - Testability vs. Readability, 32 - Meaningless Abstractions


