Notes
-----

Basic: 
Elvis and ConfusingTernary, UnnecessaryTernaryExpression
Operator overloading rules
ExplicitCallToCompareToMethod Rule and spaceship: <=>
ExplicitCall to Get At -> indexed offset
UnnecessaryCallForLastElement
UnnecessaryNullCheck -> Nullsafe Dereference instead 
Unnecessary Getter -> 
UnnecessaryObjectReferences -> Use a with block
UnnecessaryReturnKeyword
rule: replace substring with subscript operator
ConsecutiveStringConcatenation - join or use GStrings
Use Strings when Strings, GStrings when templated
  -> writer parameter
UnnecessaryPublicModifier rule
rule: unneeded def in method declaration
* Feature create UnnecessaryAnonymousRunnable rule
* Feature - create UseEqualsToCompareStrings rule
* Feature - create UselessStringValueOf rule
* Feature - create a rule for transforming for loops into for each loops
* Feature - create rule: ternary could be elvis
* Feature - create rule: prefer head()/first() to get(0) and [0]
* create rule - should use tr not replaceAll
* create excessive string newlines (should be multiline string



* Feature - rule: mismatched @WithReadLock/@WithWriteLock
* Feature - rule: Serializable class synchronizing on Object

Design: 
AbstractClassWithoutAbstractMethod 
CloseWithoutCloseable

Testing: 
JUnitStyleAssertions
UseAssertEqualsInsteadOfAssertTrue
UseAssertFalseInsteadOfNegation
UseAssertTrueInsteadOfAssertEqualsRule
UseAssertTrueInsteadOfNegation
UseAssertNullInsteadOfAssertEquals
UseAssertSameInsteadOfAssertTrue
JUnitFailWithoutMessage
UnnecessaryFail
* Rules work for assert statements as well
* Use Spock

Logging: 
LoggerForDifferentClass
MultipleLoggers



Other: 
Spread into arguments
If statements -> Guard Clauses -> chained function methods
prefer private static methods

Return from closure -- confusing

*** Analyze IntelliJ IDEA ones as well
Incompatible Types Assignments Inspections
Return statement could be implicit
Methods with too many parameters - Dyk quote
list get/set, Map get/set, getter can be keyed access
variables with field names
* Access to unresolved expression
* Access to untyped expression
* Second unsafe call
*Concurrency - Access to static field locked on instance data
*Concurrency - Busy Wait
*Concurrency - Double checked locking
*Concurrency - non private field accessed in synchronized context
*Concurrency - unsynchronized method overrides synchronized method

IDEA Java but not Groovy
Class extends Thread
Lock acquired but not safely unlocked
Synchronized block could be synchronized method
java lang import (and others)
return of collection or array field

Patterns - 
No More Template Patterns
No More Strategy Patterns 
No More Command Patterns

Effective GPars - 
WithPool for multithreading
collect parallel, find all parallel

*** Analyze Eclipse Intentions


